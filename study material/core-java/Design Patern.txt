List of Design pattern
===========================
Design patterns are common solutions to recurring problems in software design. In Java, these patterns can be broadly categorized into three groups: Creational, Structural, and Behavioral. Here’s a brief overview of 22 design patterns:

Creational Patterns
1.Singleton: Ensures a class has only one instance and provides a global point of access to it.
2.Factory Method: Defines an interface for creating an object, but lets subclasses alter the type of objects that will be created.
3.Abstract Factory: Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
4.Builder: Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.
5.Prototype: Creates new objects by copying an existing object, known as the prototype.




Structural Patterns
Adapter: Allows incompatible interfaces to work together by converting the interface of a class into another interface clients expect.
Bridge: Separates an object’s interface from its implementation, allowing the two to vary independently.
Composite: Composes objects into tree structures to represent part-whole hierarchies, allowing clients to treat individual objects and composites uniformly.
Decorator: Attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.
Facade: Provides a simplified interface to a complex subsystem, making it easier to use.
Flyweight: Reduces the cost of creating and manipulating a large number of similar objects by sharing common data.
Proxy: Provides a surrogate or placeholder for another object to control access to it.
Behavioral Patterns
Chain of Responsibility: Passes a request along a chain of handlers, allowing multiple objects to handle the request without the sender needing to know which one will do it.
Command: Encapsulates a request as an object, allowing for parameterization of clients with queues, requests, and operations.
Interpreter: Defines a representation for a language's grammar along with an interpreter that uses the representation to interpret sentences in the language.
Iterator: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
Mediator: Defines an object that encapsulates how a set of objects interact, promoting loose coupling.
Memento: Captures and externalizes an object’s internal state without violating encapsulation, allowing the object to be restored to this state later.
Observer: Defines a one-to-many dependency between objects, allowing one object to notify other objects about changes in its state.
State: Allows an object to alter its behavior when its internal state changes, appearing to change its class.
Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable, allowing the algorithm to vary independently from clients that use it.
Template Method: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses, allowing them to redefine certain steps without changing the algorithm’s structure.
These patterns help improve code structure, enhance maintainability, and facilitate collaboration in software development.